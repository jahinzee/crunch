#!/usr/bin/bash

# crunch
# Compile and run C files with one quick "crunch"!
#
# Author:   jahinzee <jahinzee@outlook.com>
# 
# Please read the README file.
# tl;dr: This is a bodge; it is incredibly finicky and probably will break if you look at it the wrong way. Use at your own risk! 
#
# This script is licensed under GPL v3. <https://www.gnu.org/licenses/gpl-3,0.html>


# -- config --
# Change these variables as needed.
# 
# - Extension for compiled files
#   Example: out : foo.c -> foo.c.out
    _COMPILE_EXT="out"
# 
# - Default compiler
#   Supported: gcc, clang
    _COMPILER="clang"


usage () {
  printf "Usage:\n"
  printf " * crunch <filename> (r/q)\n";
  printf "   - r: Execute output file.\n";
  printf "   - q: Exit crunch without executing the file.\n";
  printf " * crunch --help\n";
}

print_status() {
  printf "crunch: $1\n";
}

compile() {
  if [[ "$_COMPILER" =~ ^("gcc"|"clang")$ ]];
  then
    if [ -z $(command -v $_COMPILER) ];
    then
      print_status "error: $_COMPILER does not exist on your system."
      exit 1
    fi
    OUTPUT = "./$FILENAME" -o "$FILENAME.$_COMPILE_EXT"
    echo $?
  
  else
    print_status "error: Invalid config value (_COMPILE is \"$_COMPILER\"). Check the script file for errors."
    exit 1;
  fi
}

post_comp() {
  CMD=$1
  if [ -z "$CMD" ];
  then
    printf "What would you like to do with $FILENAME.$_COMPILE_EXT? (r/q)? "
    read -n1;
    CMD=$REPLY
	fi
	case $CMD in
		[Rr]* ) printf "\n"; exec "./$FILENAME.$_COMPILE_EXT"; exit;;
		[Qq]* ) printf "\n"; exit;;
		* ) exit;;
	esac            
}

if [ -z _COMPILE_EXT ];
then
  print_status "error: Invalid config value (_COMPILE_EXT is \"$_COMPILE_EXT\"). Check the script file for errors."
  exit 1;
fi

if [ -z "$1" ];
then
	print_status "Invalid parameters.";
	usage;
	exit 1;
fi

if [[ $1 == "--help" ]];
then
  usage;
  exit 0;
fi

FILENAME=$1;
compile

if [[ $OUTPUT -ne 0 ]];
then
  print_status "error: Compilation error.";
  exit 1;
else
  print_status "Compilation successful.";
fi

post_comp $2;
exit 0;
